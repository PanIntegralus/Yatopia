From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Bud Gidiere <sgidiere@gmail.com>
Date: Fri, 28 Aug 2020 18:02:37 -0500
Subject: [PATCH] Glowstone OpenCL Base


diff --git a/pom.xml b/pom.xml
index 7a1de791e38507bc53ab232d42712217d0845754..01a1ecd1109a16170a8e692006beee24c8c5891e 100644
--- a/pom.xml
+++ b/pom.xml
@@ -140,6 +140,23 @@
             <version>4.8.47</version>
             <scope>test</scope>
         </dependency>
+        <!-- OpenCL -->
+        <dependency>
+            <groupId>org.jogamp.gluegen</groupId>
+            <artifactId>gluegen-rt-main</artifactId>
+            <version>2.3.2</version>
+        </dependency>
+        <dependency>
+            <groupId>org.jogamp.jocl</groupId>
+            <artifactId>jocl-main</artifactId>
+            <version>2.3.2</version>
+        </dependency>
+        <dependency>
+            <groupId>org.projectlombok</groupId>
+            <artifactId>lombok</artifactId>
+            <version>1.18.10</version>
+            <scope>provided</scope>
+        </dependency>
     </dependencies>
 
     <repositories>
diff --git a/src/main/java/dev/tr7zw/yatopia/YatopiaConfig.java b/src/main/java/dev/tr7zw/yatopia/YatopiaConfig.java
index ef7d683db9e92dc6d64e9d7b4225c87637db8de2..b5a64bdedd68c0ddb3da1098e43e128f5b31f279 100644
--- a/src/main/java/dev/tr7zw/yatopia/YatopiaConfig.java
+++ b/src/main/java/dev/tr7zw/yatopia/YatopiaConfig.java
@@ -253,4 +253,9 @@ public class YatopiaConfig {
     public static boolean isProxy() {
         return org.spigotmc.SpigotConfig.bungee || com.destroystokyo.paper.PaperConfig.velocitySupport;
     }
+
+    public static boolean useGPU = false;
+    private void useGPU() {
+        useGPU = getBoolean("useGPU", false);
+    }
 }
diff --git a/src/main/java/net/glowstone/util/OpenCompute.java b/src/main/java/net/glowstone/util/OpenCompute.java
new file mode 100644
index 0000000000000000000000000000000000000000..90fadb71bfff9c2cc6cda6b355165b23a76a6cc8
--- /dev/null
+++ b/src/main/java/net/glowstone/util/OpenCompute.java
@@ -0,0 +1,178 @@
+package net.glowstone.util;
+
+import com.jogamp.opencl.CLCommandQueue;
+import com.jogamp.opencl.CLContext;
+import com.jogamp.opencl.CLDevice;
+import com.jogamp.opencl.CLKernel;
+import com.jogamp.opencl.CLPlatform;
+import com.jogamp.opencl.CLProgram;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.util.HashMap;
+import lombok.Getter;
+
+public class OpenCompute {
+
+    private static final ClassLoader CLASS_LOADER = OpenCompute.class.getClassLoader();
+    private static File openCLDir;
+    @Getter
+    private static CLPlatform platform;
+    @Getter
+    private static CLContext context;
+    @Getter
+    private static CLDevice device;
+    @Getter
+    private static CLCommandQueue queue;
+    private static HashMap<String, CLProgram> programs;
+    private static HashMap<CLProgram, HashMap<String, CLKernel>> kernels;
+
+    /**
+     * Returns an OpenCL program, loading it synchronously if it's not in cache.
+     *
+     * @param name the program filename
+     * @return the OpenCL program, or null if there isn't a valid program with that name
+     */
+    public static CLProgram getProgram(String name) {
+        if (programs.containsKey(name)) {
+            return programs.get(name);
+        } else {
+            if (openCLDir.exists() && openCLDir.isDirectory()) {
+                File file = new File(openCLDir, name);
+                if (file.exists()) {
+                    try (InputStream input = new FileInputStream(file)) {
+                        CLProgram program = context.createProgram(input).build();
+                        programs.put(name, program);
+                        return program;
+                    } catch (IOException ex) {
+                        System.out.println(
+                                "Could not load custom OpenCL program.");
+                    }
+                } else {
+                    try (InputStream input = CLASS_LOADER
+                            .getResourceAsStream("builtin/opencl/" + name)) {
+                        CLProgram program = context.createProgram(input).build();
+                        programs.put(name, program);
+                        return program;
+                    } catch (IOException ex) {
+                        System.out.println(
+                                "Could not load builtin OpenCL program.");
+                    }
+                }
+            }
+        }
+        return null;
+    }
+
+    public static CLKernel getKernel(CLProgram program, String name) {
+        return getKernel(program, name, false);
+    }
+
+    /**
+     * Returns a {@link CLKernel} that is part of the given {@link CLProgram}.
+     *
+     * @param program the {@link CLProgram} that contains the kernel
+     * @param name the name of the kernel
+     * @param threaded if true, always create a new {@link CLKernel} instance
+     * @return the {@link CLKernel}
+     */
+    public static CLKernel getKernel(CLProgram program, String name, boolean threaded) {
+        if (kernels.containsKey(program)) {
+            HashMap<String, CLKernel> kernel = kernels.get(program);
+            if (kernel.containsKey(name) && !threaded) {
+                return kernel.get(name);
+            } else {
+                CLKernel clKernel = program.createCLKernel(name);
+                kernel.put(name, clKernel);
+                return clKernel;
+            }
+        } else {
+            kernels.put(program, new HashMap<>());
+            CLKernel clKernel = program.createCLKernel(name);
+            kernels.get(program).put(name, clKernel);
+            return clKernel;
+        }
+    }
+
+    /**
+     * Initializes the {@link CLContext}, {@link CLDevice} and {@link CLCommandQueue} for the given
+     * {@link CLPlatform}.
+     *
+     * @param platform the {@link CLPlatform} to use
+     */
+    public static void initContext(CLPlatform platform) {
+
+        openCLDir = new File("opencl");
+
+        if (!openCLDir.isDirectory() && !openCLDir.mkdirs()) {
+            System.out.println("Cannot create OpenCL directory");
+        }
+
+        programs = new HashMap<>();
+        kernels = new HashMap<>();
+        OpenCompute.platform = platform;
+        context = CLContext.create(platform);
+        device = context.getMaxFlopsDevice();
+        queue = device.createCommandQueue();
+
+        System.out.println("OpenCL: Using " + platform + " on device " + device + ".");
+    }
+
+    /**
+     * Calculates the number of work groups.
+     *
+     * @param size the total number of local work units
+     * @return the number of work groups
+     */
+    public static int getGlobalSize(int size) {
+        return getGlobalSize(size, getLocalSize());
+    }
+
+    /**
+     * Calculates the number of work groups.
+     *
+     * @param size the total number of local work units
+     * @param localWorkSize the number of local work units per work group
+     * @return the number of work groups
+     */
+    public static int getGlobalSize(int size, int localWorkSize) {
+        int globalSize = size;
+        int r = globalSize % localWorkSize;
+        if (r != 0) {
+            globalSize += localWorkSize - r;
+        }
+        return globalSize;
+    }
+
+    /**
+     * Calculates the number of local work units per work group.
+     *
+     * @return the size of the work groups
+     */
+    public static int getLocalSize() {
+        return Math.min(device.getMaxWorkGroupSize(), 256);
+    }
+
+    /**
+     * Calculates the number of local work units per work group, applying a specified maximum.
+     *
+     * @param max the maximum size allowed
+     * @return the size of the work groups
+     */
+    public static int getLocalSize(int max) {
+        return Math.min(device.getMaxWorkGroupSize(), max);
+    }
+
+    /**
+     * Static de-initializer. Clears all references to {@link CLProgram}, {@link CLKernel} and
+     * {@link CLContext} instances.
+     */
+    public static void release() {
+        programs.clear();
+        programs = null;
+        kernels.clear();
+        kernels = null;
+        context.release();
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/net/yatopia/server/CLNoise.java b/src/main/java/net/yatopia/server/CLNoise.java
new file mode 100644
index 0000000000000000000000000000000000000000..958319b90fe13d0657ec2c3b1e75dfd0078d68e8
--- /dev/null
+++ b/src/main/java/net/yatopia/server/CLNoise.java
@@ -0,0 +1,2 @@
+package net.yatopia.server;public class CLNoise {
+}
diff --git a/src/main/resources/opencl/net/glowstone/CLRandom.cl b/src/main/resources/opencl/net/glowstone/CLRandom.cl
new file mode 100644
index 0000000000000000000000000000000000000000..335395de7965586f9eb85bebf66f6bdccea5e9e9
--- /dev/null
+++ b/src/main/resources/opencl/net/glowstone/CLRandom.cl
@@ -0,0 +1,13 @@
+kernel void GenerateNoise(float base,
+             float fine,
+             global float* rands,
+             int length)
+{
+    int gid = get_global_id(0);
+
+    if (gid >= length) {
+        return;
+    }
+
+    rands[gid] = base * gid + fine / (base + gid) + 1 / gid;
+}
\ No newline at end of file
